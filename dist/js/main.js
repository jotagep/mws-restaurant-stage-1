let restaurants,neighborhoods,cuisines;var map,markers=[];document.addEventListener("DOMContentLoaded",e=>{fetchNeighborhoods(),fetchCuisines()}),fetchNeighborhoods=(()=>{DBHelper.fetchNeighborhoods((e,t)=>{e?console.error(e):(self.neighborhoods=t,fillNeighborhoodsHTML())})}),fillNeighborhoodsHTML=((e=self.neighborhoods)=>{const t=document.getElementById("neighborhoods-select");e.forEach(e=>{const n=document.createElement("option");n.innerHTML=e,n.value=e,t.append(n)})}),fetchCuisines=(()=>{DBHelper.fetchCuisines((e,t)=>{e?console.error(e):(self.cuisines=t,fillCuisinesHTML())})}),fillCuisinesHTML=((e=self.cuisines)=>{const t=document.getElementById("cuisines-select");e.forEach(e=>{const n=document.createElement("option");n.innerHTML=e,n.value=e,t.append(n)})}),window.initMap=(()=>{self.map=new google.maps.Map(document.getElementById("map"),{zoom:12,center:{lat:40.722216,lng:-73.987501},scrollwheel:!1}),updateRestaurants()}),updateRestaurants=(()=>{const e=document.getElementById("cuisines-select"),t=document.getElementById("neighborhoods-select"),n=e.selectedIndex,a=t.selectedIndex,s=e[n].value,r=t[a].value;DBHelper.fetchRestaurantByCuisineAndNeighborhood(s,r,(e,t)=>{e?console.error(e):(resetRestaurants(t),fillRestaurantsHTML())})}),resetRestaurants=(e=>{self.restaurants=[],document.getElementById("restaurants-list").innerHTML="",self.markers.forEach(e=>e.setMap(null)),self.markers=[],self.restaurants=e}),fillRestaurantsHTML=((e=self.restaurants)=>{const t=document.getElementById("restaurants-list");e.forEach(e=>{t.append(createRestaurantHTML(e))}),addMarkersToMap()}),createRestaurantHTML=(e=>{const t=document.createElement("li");t.className="card";const n=document.createElement("picture");t.append(n);const a=document.createElement("source");a.type="image/webp",a.srcset=DBHelper.imageRespForRestaurant(e,"large","webp"),a.media="(min-width: 511px) and (max-width: 640px)",n.append(a);const s=document.createElement("source");s.type="image/webp",s.srcset=DBHelper.imageRespForRestaurant(e,"medium","webp"),s.media="(min-width: 411px) and (max-width: 510px),\n                       (min-width: 791px) and (max-width: 930px),\n                       (min-width: 1191px)",n.append(s);const r=document.createElement("source");r.type="image/webp",r.srcset=DBHelper.imageRespForRestaurant(e,"small","webp"),r.media="(max-width: 410px),\n                       (min-width: 650px) and (max-width: 800px),\n                       (min-width: 950px) and (max-width: 1200px)",n.append(r);const o=document.createElement("source");o.type="image/jpeg",o.srcset=DBHelper.imageRespForRestaurant(e,"large"),o.media="(min-width: 511px) and (max-width: 640px)",n.append(o);const i=document.createElement("source");i.type="image/jpeg",i.srcset=DBHelper.imageRespForRestaurant(e,"medium"),i.media="(min-width: 411px) and (max-width: 510px),\n                         (min-width: 791px) and (max-width: 930px),\n                         (min-width: 1191px)",n.append(i);const d=document.createElement("img");d.type="image/jpeg",d.className="card__img",d.srcset=DBHelper.imageRespForRestaurant(e,"small"),d.media="(max-width: 410px),\n                         (min-width: 650px) and (max-width: 800px),\n                         (min-width: 950px) and (max-width: 1200px)",d.alt=`${e.name} - ${e.photo_description}`,n.append(d);const c=document.createElement("h3");c.className="card__title",c.innerHTML=e.name,t.append(c);const m=document.createElement("p");m.className="card__description",m.innerHTML=e.neighborhood,t.append(m);const p=document.createElement("p");p.className="card__description",p.innerHTML=e.address,t.append(p);const l=document.createElement("a");return l.className="card__button",l.setAttribute("role","button"),l.setAttribute("aria-label","Go to restaurant details"),l.innerHTML="View Details",l.href=DBHelper.urlForRestaurant(e),t.append(l),t}),addMarkersToMap=((e=self.restaurants)=>{e.forEach(e=>{const t=DBHelper.mapMarkerForRestaurant(e,self.map);google.maps.event.addListener(t,"click",()=>{window.location.href=t.url}),self.markers.push(t)})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
