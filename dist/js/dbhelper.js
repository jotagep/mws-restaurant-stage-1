class DBHelper{static get DATABASE_URL(){const t="/data/restaurants.json";return window.location.hostname.includes("localhost")?`${window.location.protocol}//${window.location.hostname}:${window.location.port}${t}`:`https://jotagep.github.io/mws-restaurant-udacity${t}`}static fetchRestaurants(t){let e=new XMLHttpRequest;e.open("GET",DBHelper.DATABASE_URL),e.onload=(()=>{if(200===e.status){const s=JSON.parse(e.responseText).restaurants;t(null,s)}else{const s=`Request failed. Returned status of ${e.status}`;t(s,null)}}),e.send()}static fetchRestaurantById(t,e){DBHelper.fetchRestaurants((s,a)=>{if(s)e(s,null);else{const s=a.find(e=>e.id==t);s?e(null,s):e("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(t,e){DBHelper.fetchRestaurants((s,a)=>{if(s)e(s,null);else{const s=a.filter(e=>e.cuisine_type==t);e(null,s)}})}static fetchRestaurantByNeighborhood(t,e){DBHelper.fetchRestaurants((s,a)=>{if(s)e(s,null);else{const s=a.filter(e=>e.neighborhood==t);e(null,s)}})}static fetchRestaurantByCuisineAndNeighborhood(t,e,s){DBHelper.fetchRestaurants((a,n)=>{if(a)s(a,null);else{let a=n;"all"!=t&&(a=a.filter(e=>e.cuisine_type==t)),"all"!=e&&(a=a.filter(t=>t.neighborhood==e)),s(null,a)}})}static fetchNeighborhoods(t){DBHelper.fetchRestaurants((e,s)=>{if(e)t(e,null);else{const e=s.map((t,e)=>s[e].neighborhood),a=e.filter((t,s)=>e.indexOf(t)==s);t(null,a)}})}static fetchCuisines(t){DBHelper.fetchRestaurants((e,s)=>{if(e)t(e,null);else{const e=s.map((t,e)=>s[e].cuisine_type),a=e.filter((t,s)=>e.indexOf(t)==s);t(null,a)}})}static urlForRestaurant(t){return`./restaurant.html?id=${t.id}`}static imageUrlForRestaurant(t){return`./assets/img/${t.photograph}`}static imageRespForRestaurant(t,e="original",s="jpg"){return"small"==e||"medium"==e?`./assets/img/${t.id}-${e}.${s} 1x,\n      ./assets/img/${t.id}-${e}@2x.${s} 2x`:`./assets/img/${t.id}-${e}.${s} 1x`}static mapMarkerForRestaurant(t,e){return new google.maps.Marker({position:t.latlng,title:t.name,url:DBHelper.urlForRestaurant(t),map:e,animation:google.maps.Animation.DROP})}}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
